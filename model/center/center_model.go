// Code generated by go-dbmodel-gen. DO NOT EDIT.
// versions:
// 	go-dbmodel-gen v1.0.2
// nolint
package model

import (
    "time"
    "fmt"

	"ginTemplate/model/common"
)

/** JSGEN({type: "model", paged: true})
CREATE TABLE tbCenter (
	id int(10) NOT NULL AUTO_INCREMENT  COMMENT 'ID',
    centerCode varchar(64) NOT NULL DEFAULT '' COMMENT '中心代码',
    centerName varchar(64) NOT NULL DEFAULT '' COMMENT '中心名称',
    status int(10) NOT NULL DEFAULT 1 COMMENT '记录状态：1表示可用，0表示不可用',
    creator varchar(64) NOT NULL DEFAULT '' COMMENT '创建者',
    createTime datetime NOT NULL COMMENT '创建时间@now',
    updater varchar(64) NOT NULL DEFAULT '' COMMENT '最后更新人',
    updateTime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    PRIMARY KEY (id)
);

JSGEN **/

var _ = time.Now

// CenterConnection Center连接类型
type CenterConnection func() common.DBConnect

// DefaultCenterConnection DefaultCenter默认连接
var DefaultCenterConnection CenterConnection

// Center Center值类型
type Center struct {
  ID int `json:"id"`
  CenterCode string `json:"centerCode"`
  CenterName string `json:"centerName"`
  Status int `json:"status"`
  Creator string `json:"creator"`
  CreateTime time.Time `json:"createTime"`
  Updater string `json:"updater"`
  UpdateTime time.Time `json:"updateTime"`
}

// Add 插入Center
func (c CenterConnection) Add(model *Center) (int64, error) {
    sqlStr := "INSERT INTO `tbCenter` (`centerCode`, `centerName`, `status`, `creator`, `createTime`, `updater`) VALUES(?, ?, ?, ?, now(), ?)"
    result, err := c().Exec(sqlStr, model.CenterCode, model.CenterName, model.Status, model.Creator, model.Updater)
    if err != nil {
        return 0, err
    } 
    
    return result.LastInsertId()
}

// AddCenter 插入Center
func AddCenter(model *Center) (int64, error) {
    return DefaultCenterConnection.Add(model)
}

// Find 查询Center
func (c CenterConnection) Find(condition string, args ...interface{}) ([]*Center, error) {
    sqlStr := "SELECT `id`, `centerCode`, `centerName`, `status`, `creator`, `createTime`, `updater`, `updateTime` FROM `tbCenter`"
    if len(condition) > 0 {
        sqlStr = sqlStr + " WHERE " + condition
    }
    results := make([]*Center, 0)

	stmt, err := c().Prepare(sqlStr)
	if err != nil {
		return results, err
	}
	defer stmt.Close()
	rows, err := stmt.Query(args...)
    if err != nil {
        return results, err
    } 
    
        defer rows.Close()
        for rows.Next() {
            model := Center{}
            values := []interface{}{
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
            }
            rows.Scan(values...)
            if *(values[0].(*interface{})) != nil {
                tmp := int((*(values[0].(*interface{}))).(int64))
                model.ID = tmp
            }
            if *(values[1].(*interface{})) != nil {
                tmp := string((*(values[1].(*interface{}))).([]uint8))
                model.CenterCode = tmp
            }
            if *(values[2].(*interface{})) != nil {
                tmp := string((*(values[2].(*interface{}))).([]uint8))
                model.CenterName = tmp
            }
            if *(values[3].(*interface{})) != nil {
                tmp := int((*(values[3].(*interface{}))).(int64))
                model.Status = tmp
            }
            if *(values[4].(*interface{})) != nil {
                tmp := string((*(values[4].(*interface{}))).([]uint8))
                model.Creator = tmp
            }
            if *(values[5].(*interface{})) != nil {
                tmp := (*(values[5].(*interface{}))).(time.Time)
                model.CreateTime = tmp
            }
            if *(values[6].(*interface{})) != nil {
                tmp := string((*(values[6].(*interface{}))).([]uint8))
                model.Updater = tmp
            }
            if *(values[7].(*interface{})) != nil {
                tmp := (*(values[7].(*interface{}))).(time.Time)
                model.UpdateTime = tmp
            }
            results = append(results, &model)
        }
    return results, nil
}

// FindCenter 查询Center
func FindCenter(condition string, args ...interface{}) ([]*Center, error) {
    return DefaultCenterConnection.Find(condition, args...)
}
// PagedQuery 分页查询Center
func (c CenterConnection) PagedQuery(condition string, pageSize uint, page uint, args ...interface{}) (totalCount uint, rows []*Center, err error) {
	sqlStr := "SELECT COUNT(1) as cnt FROM `tbCenter`"
	if len(condition) > 0 {
		sqlStr = sqlStr + " WHERE " + condition
	}

	cr := c().QueryRow(sqlStr, args...)

	err = cr.Scan(&totalCount)
	if err != nil {
		return 0, nil, err
	}
	if page > 0 {
		page = page - 1
	}
	offset := page * pageSize
	if totalCount <= offset {
		return totalCount, []*Center{}, nil
	}

	if len(condition) == 0 {
		condition = fmt.Sprintf("1=1")
	}
	condition = condition + fmt.Sprintf(" LIMIT %d OFFSET %d", pageSize, offset)
	rows, err = c.Find(condition, args...)
	return
}

// CenterPagedQuery 分页查询Center
func CenterPagedQuery(condition string, pageSize uint, page uint, args ...interface{}) (totalCount uint, rows []*Center, err error) {
	return DefaultCenterConnection.PagedQuery(condition, pageSize, page, args...)
}

// Get 获取Center
func (c CenterConnection) Get(condition string, args ...interface{}) (*Center, error) {
    results, err := c.Find(condition, args...)

    if err != nil {
        return nil, err
    } 
    
    if len(results) > 0 {
        return results[0], nil
    } 
        
    return nil, nil
}


// GetCenter 获取Center
func GetCenter(condition string, args ...interface{}) (*Center, error) {
    return DefaultCenterConnection.Get(condition, args...)
}

// Update 更新Center
func (c CenterConnection) Update(model *Center) (int64, error) {
    sqlStr := "UPDATE `tbCenter` SET `centerCode` = ?, `centerName` = ?, `status` = ?, `creator` = ?, `updater` = ? WHERE `id` = ?"
    result, err := c().Exec(sqlStr, model.CenterCode, model.CenterName, model.Status, model.Creator, model.Updater, model.ID)
    if err != nil {
        return 0, err
    }
    return result.RowsAffected()
}

// UpdateCenter 更新Center
func UpdateCenter(model *Center) (int64, error) {
    return DefaultCenterConnection.Update(model)
}
