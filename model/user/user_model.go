// Code generated by go-dbmodel-gen. DO NOT EDIT.
// versions:
// 	go-dbmodel-gen v1.0.2
// nolint
package model

import (
    "time"
    "fmt"

	"ginTemplate/model/common"
)

/** JSGEN({type: "model", paged: true})
CREATE TABLE tbUser (
		id int(10) NOT NULL AUTO_INCREMENT  COMMENT 'ID',
		address varchar(512) NOT NULL COMMENT '地址',
		nickName varchar(128) NOT NULL COMMENT '昵称',
		email varchar(128) NOT NULL COMMENT '邮箱',
		imageUrl varchar(1024) NOT NULL DEFAULT '' COMMENT '头像地址',
		introduction varchar(1024) NOT NULL COMMENT '简介',
    status int(10) NOT NULL DEFAULT 1 COMMENT '记录状态：1表示可用，0表示不可用',
    creator varchar(64) NOT NULL DEFAULT '' COMMENT '创建者',
    createTime datetime NOT NULL COMMENT '创建时间@now',
    updater varchar(64) NOT NULL DEFAULT '' COMMENT '最后更新人',
    updateTime datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    PRIMARY KEY (id)
);
JSGEN **/

var _ = time.Now

// UserConnection User连接类型
type UserConnection func() common.DBConnect

// DefaultUserConnection DefaultUser默认连接
var DefaultUserConnection UserConnection

// User User值类型
type User struct {
  ID int `json:"id"`
  Address string `json:"address"`
  NickName string `json:"nickName"`
  Email string `json:"email"`
  ImageURL string `json:"imageUrl"`
  Introduction string `json:"introduction"`
  Status int `json:"status"`
  Creator string `json:"creator"`
  CreateTime time.Time `json:"createTime"`
  Updater string `json:"updater"`
  UpdateTime time.Time `json:"updateTime"`
}

// Add 插入User
func (c UserConnection) Add(model *User) (int64, error) {
    sqlStr := "INSERT INTO `tbUser` (`address`, `nickName`, `email`, `imageUrl`, `introduction`, `status`, `creator`, `createTime`, `updater`) VALUES(?, ?, ?, ?, ?, ?, ?, now(), ?)"
    result, err := c().Exec(sqlStr, model.Address, model.NickName, model.Email, model.ImageURL, model.Introduction, model.Status, model.Creator, model.Updater)
    if err != nil {
        return 0, err
    } 
    
    return result.LastInsertId()
}

// AddUser 插入User
func AddUser(model *User) (int64, error) {
    return DefaultUserConnection.Add(model)
}

// Find 查询User
func (c UserConnection) Find(condition string, args ...interface{}) ([]*User, error) {
    sqlStr := "SELECT `id`, `address`, `nickName`, `email`, `imageUrl`, `introduction`, `status`, `creator`, `createTime`, `updater`, `updateTime` FROM `tbUser`"
    if len(condition) > 0 {
        sqlStr = sqlStr + " WHERE " + condition
    }
    results := make([]*User, 0)

	stmt, err := c().Prepare(sqlStr)
	if err != nil {
		return results, err
	}
	defer stmt.Close()
	rows, err := stmt.Query(args...)
    if err != nil {
        return results, err
    } 
    
        defer rows.Close()
        for rows.Next() {
            model := User{}
            values := []interface{}{
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
              new(interface{}),
            }
            rows.Scan(values...)
            if *(values[0].(*interface{})) != nil {
                tmp := int((*(values[0].(*interface{}))).(int64))
                model.ID = tmp
            }
            if *(values[1].(*interface{})) != nil {
                tmp := string((*(values[1].(*interface{}))).([]uint8))
                model.Address = tmp
            }
            if *(values[2].(*interface{})) != nil {
                tmp := string((*(values[2].(*interface{}))).([]uint8))
                model.NickName = tmp
            }
            if *(values[3].(*interface{})) != nil {
                tmp := string((*(values[3].(*interface{}))).([]uint8))
                model.Email = tmp
            }
            if *(values[4].(*interface{})) != nil {
                tmp := string((*(values[4].(*interface{}))).([]uint8))
                model.ImageURL = tmp
            }
            if *(values[5].(*interface{})) != nil {
                tmp := string((*(values[5].(*interface{}))).([]uint8))
                model.Introduction = tmp
            }
            if *(values[6].(*interface{})) != nil {
                tmp := int((*(values[6].(*interface{}))).(int64))
                model.Status = tmp
            }
            if *(values[7].(*interface{})) != nil {
                tmp := string((*(values[7].(*interface{}))).([]uint8))
                model.Creator = tmp
            }
            if *(values[8].(*interface{})) != nil {
                tmp := (*(values[8].(*interface{}))).(time.Time)
                model.CreateTime = tmp
            }
            if *(values[9].(*interface{})) != nil {
                tmp := string((*(values[9].(*interface{}))).([]uint8))
                model.Updater = tmp
            }
            if *(values[10].(*interface{})) != nil {
                tmp := (*(values[10].(*interface{}))).(time.Time)
                model.UpdateTime = tmp
            }
            results = append(results, &model)
        }
    return results, nil
}

// FindUser 查询User
func FindUser(condition string, args ...interface{}) ([]*User, error) {
    return DefaultUserConnection.Find(condition, args...)
}
// PagedQuery 分页查询User
func (c UserConnection) PagedQuery(condition string, pageSize uint, page uint, args ...interface{}) (totalCount uint, rows []*User, err error) {
	sqlStr := "SELECT COUNT(1) as cnt FROM `tbUser`"
	if len(condition) > 0 {
		sqlStr = sqlStr + " WHERE " + condition
	}

	cr := c().QueryRow(sqlStr, args...)

	err = cr.Scan(&totalCount)
	if err != nil {
		return 0, nil, err
	}
	if page > 0 {
		page = page - 1
	}
	offset := page * pageSize
	if totalCount <= offset {
		return totalCount, []*User{}, nil
	}

	if len(condition) == 0 {
		condition = fmt.Sprintf("1=1")
	}
	condition = condition + fmt.Sprintf(" LIMIT %d OFFSET %d", pageSize, offset)
	rows, err = c.Find(condition, args...)
	return
}

// UserPagedQuery 分页查询User
func UserPagedQuery(condition string, pageSize uint, page uint, args ...interface{}) (totalCount uint, rows []*User, err error) {
	return DefaultUserConnection.PagedQuery(condition, pageSize, page, args...)
}

// Get 获取User
func (c UserConnection) Get(condition string, args ...interface{}) (*User, error) {
    results, err := c.Find(condition, args...)

    if err != nil {
        return nil, err
    } 
    
    if len(results) > 0 {
        return results[0], nil
    } 
        
    return nil, nil
}


// GetUser 获取User
func GetUser(condition string, args ...interface{}) (*User, error) {
    return DefaultUserConnection.Get(condition, args...)
}

// Update 更新User
func (c UserConnection) Update(model *User) (int64, error) {
    sqlStr := "UPDATE `tbUser` SET `address` = ?, `nickName` = ?, `email` = ?, `imageUrl` = ?, `introduction` = ?, `status` = ?, `creator` = ?, `updater` = ? WHERE `id` = ?"
    result, err := c().Exec(sqlStr, model.Address, model.NickName, model.Email, model.ImageURL, model.Introduction, model.Status, model.Creator, model.Updater, model.ID)
    if err != nil {
        return 0, err
    }
    return result.RowsAffected()
}

// UpdateUser 更新User
func UpdateUser(model *User) (int64, error) {
    return DefaultUserConnection.Update(model)
}
